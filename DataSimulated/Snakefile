import numpy as np
import os
ROOT = os.path.abspath('../../..')
import sys
sys.path.append(ROOT)
BATCH_PATH = "{0}/scripts/hyphy_template.bf".format(ROOT)
from scripts.snakemake_module import *

EXPERIMENT = os.path.abspath('.')
configfile: EXPERIMENT + "/config.yaml"

SEED = config['SEED']
EXON_SIZE = config['EXON_SIZE']
NBR_EXON = config['NBR_EXON']
NBR_SITES = EXON_SIZE * NBR_EXON

print(EXPERIMENT)
os.makedirs(EXPERIMENT, exist_ok=True)
os.makedirs(EXPERIMENT + "/std", exist_ok=True)
os.makedirs(EXPERIMENT + "/slurm", exist_ok=True)
os.makedirs(EXPERIMENT + "/benchmarks", exist_ok=True)

NEWICK_PATH = copy_params(EXPERIMENT, ROOT, config['TREE'])
MUTATION_MATRIX = copy_params(EXPERIMENT, ROOT, config['NUC_MATRIX']) if ('NUC_MATRIX' in config) and config['NUC_MATRIX'] else False
PROFILE = copy_params(EXPERIMENT, ROOT, config['PROFILE']) if ('PROFILE' in config) and config['PROFILE'] else False
#Parameters for the simulation
SIMULATION_PARAMS = '--newick ' + NEWICK_PATH
SIMULATION_PARAMS += ' --mutation_rate_per_generation {0}'.format(config['MUTATION_RATE_PER_GENERATION'])
SIMULATION_PARAMS += ' --generation_time {0}'.format(1.0)
SIMULATION_PARAMS += ' --unused_root_age'
SIMULATION_PARAMS += ' --exon_size {0}'.format(EXON_SIZE)
SIMULATION_PARAMS += ' --branch_wise_correlation'
SIMULATION_PARAMS += ' --fix_pop_size'
SIMULATION_PARAMS += ' --fix_mut_rate'
SIMULATION_PARAMS += ' --fix_gen_time'

if MUTATION_MATRIX:
    mut_bias_array = [1]
else:
    mut_bias_array = ["{0:3f}".format(i) for i in np.logspace(np.log10(config['LAMBDA_ARRAY_MIN']), np.log10(config['LAMBDA_ARRAY_MAX']), config['LAMBDA_ARRAY_STEPS'])]

replicates_array = list(range(1, config['REPLICATES'] + 1))

alpha_array = ["{0:3f}".format(i) for i in np.logspace(np.log10(config['ALPHA_ARRAY_MIN']), np.log10(config['ALPHA_ARRAY_MAX']), config['ALPHA_ARRAY_STEPS'])]
for alpha in alpha_array:
    os.makedirs(EXPERIMENT + "/" + alpha, exist_ok=True)

for program in ['SimuEvol']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))

localrules: all, cp_simuevol, create_profile, generate_matrix, plot_simulations, simulation, build_batchfile, inference,
          merge_inference, build, filter_ali

rule all:
    input:
         EXPERIMENT + '/plot_simulation',
         expand(EXPERIMENT + '/{alpha}/{model}_plot', model=config['MODELS'], alpha=alpha_array)

rule cp_simuevol:
    output: EXPERIMENT + '/SimuProfile',
    input: dir=EXPERIMENT + '/SimuEvol.version'
    shell: 'cd {ROOT}/SimuEvol && cp build/SimuProfile {EXPERIMENT}'

if PROFILE:
    rule create_profile:
        output: EXPERIMENT + '/{alpha}_profile.prefs'
        input: ROOT + "/scripts/extend_profile.py"
        params:
              alpha=lambda w: "--relative {0}".format(w.alpha)
        shell: 'python3 {input} --input {PROFILE} --relative_pop_size {wildcards.alpha} --nbr_exons {NBR_EXON} --output {output}'
else:
    rule create_profile:
        output: EXPERIMENT + '/{alpha}_profile.prefs'
        input: ROOT + "/scripts/generate_profile.py"
        shell: 'python3 {input} --alpha {wildcards.alpha} --nbr_sites {NBR_SITES} --output {output}'

rule generate_matrix:
    output: EXPERIMENT + '/{mut_bias}_matrix.tsv'
    input:
         exec=ROOT + "/scripts/generate_matrix.py"
    params:
          mut_bias=lambda w: "--lambda {0}".format(w.mut_bias)
    shell: 'python3 {input.exec} {params.mut_bias} --output {output}'

rule run_simulation:
    output: touch(EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_exp')
    input:
         exec=rules.cp_simuevol.output,
         prefs=rules.create_profile.output,
         matrix=MUTATION_MATRIX if MUTATION_MATRIX else rules.generate_matrix.output
    params:
         time="0-4:00", mem=1000, threads=1,
         seed=lambda w: int(w.replicates) * 10**3
    benchmark: EXPERIMENT + "/benchmarks/exp_{alpha}_{mut_bias}_{replicates}.tsv"
    log:
        out=EXPERIMENT + '/std/exp_{alpha}_{mut_bias}_{replicates}.stdout',
        err=EXPERIMENT + '/std/exp_{alpha}_{mut_bias}_{replicates}.stderr'
    shell: '{input.exec} {SIMULATION_PARAMS} --seed {params.seed} --nuc_matrix {input.matrix} --preferences {input.prefs} --output {output} 2> {log.err} 1> {log.out}'

rule plot_simulations:
    output: directory(EXPERIMENT + '/plot_simulation')
    input:
         src=ROOT + "/scripts/stat_simulated.py",
         exp=expand(rules.run_simulation.output, alpha=alpha_array, mut_bias=mut_bias_array, replicates=replicates_array)
    params:
         exp=lambda w: expand(EXPERIMENT + '/{alpha}/{mut_bias}', alpha=alpha_array, mut_bias=mut_bias_array)
    shell: 'mkdir -p {output} && python3 {input.src} --input {params.exp} --output {output}'

rule simulation:
    input: EXPERIMENT + '/plot_simulation'

rule filter_ali:
    output:
         EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_exp.ThirdPos.fasta'
    input:
         ali=EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_exp',
         exec=ROOT + "/scripts/filter_third_positions.py"
    shell: 'python3 {input.exec} --input {input.ali}.ali --output {output}'

rule build_batchfile:
    output: EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_{model}_run.bf'
    input:
         exec=ROOT + "/scripts/hyphy_build.py",
         fasta=lambda w: EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_exp' + (".ThirdPos.fasta" if w.model == "GTR" else "")
    params:
          time="1-23:00", mem=2000, threads=1,
          ext=lambda w: "" if w.model == "GTR" else ".ali"
    shell: 'python3 {input.exec} --input {BATCH_PATH} --fasta {input.fasta}{params.ext} --model {wildcards.model} --tree {NEWICK_PATH} --output {output}'

rule build:
    input: expand(EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_{model}_run.bf', mut_bias=mut_bias_array, replicates=replicates_array, model=config['MODELS'], alpha=alpha_array)

rule run_inference:
    output: EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_{model}_run.bf_hyout.txt'
    input: EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_{model}_run.bf'
    params: time="1-23:00", mem=2000, threads=1
    benchmark: EXPERIMENT + "/benchmarks/inference.{alpha}_{mut_bias}_{replicates}_{model}_run.tsv"
    log:
         out=EXPERIMENT + '/std/hyphy_{alpha}_{mut_bias}_{replicates}_{model}.stdout',
         err=EXPERIMENT + '/std/hyphy_{alpha}_{mut_bias}_{replicates}_{model}.stderr'
    shell: 'hyphy {input} 2> {log.err} 1> {log.out}'

rule inference:
    input: expand(EXPERIMENT + '/{alpha}/{mut_bias}_{replicates}_{model}_run.bf_hyout.txt', mut_bias=mut_bias_array, replicates=replicates_array, model=config['MODELS'], alpha=alpha_array)

rule merge_inference:
    output: directory(EXPERIMENT + '/{alpha}/{model}_plot')
    input:
         src=ROOT + "/scripts/hyphy_simulated.py",
         infer=expand(EXPERIMENT + '/{{alpha}}/{mut_bias}_{replicates}_{{model}}_run.bf_hyout.txt', mut_bias=mut_bias_array, replicates=replicates_array)
    shell:
         'mkdir -p {output} && python3 {input.src} --model {wildcards.model} --trace {input.infer} --mutation_matrix {MUTATION_MATRIX} --output {output}'