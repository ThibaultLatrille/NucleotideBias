import os
ROOT = os.path.abspath('..')
import numpy as np
import sys
sys.path.append(ROOT)
BATCH_PATH = "{0}/scripts/hyphy_template.bf".format(ROOT)
from scripts.snakemake_module import *

SEED = 42
EXON_SIZE = 498
NBR_EXON = 25
NBR_SITES = EXON_SIZE * NBR_EXON
MUT_RATE = 5.0
EXPERIMENT = os.path.abspath('.') + "/n_{0}_mu{1}".format(NBR_SITES, MUT_RATE)
print(EXPERIMENT)
os.makedirs(EXPERIMENT, exist_ok=True)
os.makedirs(EXPERIMENT + "/std", exist_ok=True)
os.makedirs(EXPERIMENT + "/benchmarks", exist_ok=True)

NEWICK = "np.newick"
NEWICK_PATH = "{0}/{1}".format(EXPERIMENT, NEWICK)
os.system('cp {0}/{1} {2}'.format(os.path.abspath('.'), NEWICK, NEWICK_PATH))


#Parameters for the simulation
SIMULATION_PARAMS = '--newick ' + NEWICK_PATH
SIMULATION_PARAMS += ' --mutation_rate_per_generation {0}'.format(MUT_RATE)
SIMULATION_PARAMS += ' --generation_time {0}'.format(1.0)
SIMULATION_PARAMS += ' --seed {0}'.format(SEED)
SIMULATION_PARAMS += ' --unused_root_age'
SIMULATION_PARAMS += ' --exon_size {0}'.format(EXON_SIZE)
SIMULATION_PARAMS += ' --branch_wise_correlation'
SIMULATION_PARAMS += ' --fix_pop_size'
SIMULATION_PARAMS += ' --fix_mut_rate'
SIMULATION_PARAMS += ' --fix_gen_time'

mut_bias_array = ["{0:3f}".format(i) for i in np.logspace(-1, 1, 32)]
alpha_array = ["{0:3f}".format(i) for i in np.logspace(-1, 1, 5)]
for alpha in alpha_array:
    os.makedirs(EXPERIMENT + "/" + alpha, exist_ok=True)
models = ["MG", "MF"]

for program in ['SimuEvol']:
    diff_git_dir("{0}/{1}".format(ROOT, program), "{0}/{1}".format(EXPERIMENT, program))


rule all:
    input:
         EXPERIMENT + '/plot_simulation',
         # EXPERIMENT + '/plot_hyphy'

rule cp_simuevol:
    output: EXPERIMENT + '/SimuProfile',
    input: dir=EXPERIMENT + '/SimuEvol.version'
    shell: 'cd {ROOT}/SimuEvol && cp build/SimuProfile {EXPERIMENT}'

rule generate_profile:
    output: EXPERIMENT + '/{alpha}_profile.prefs'
    input:
         exec=ROOT + "/scripts/generate_profile.py"
    params:
          alpha=lambda w: "--alpha {0}".format(w.alpha)
    shell: 'python3 {input.exec} {params.alpha} --nbr_sites {NBR_SITES} --output {output}'

rule generate_matrix:
    output: EXPERIMENT + '/{mut_bias}_matrix.tsv'
    input:
         exec=ROOT + "/scripts/generate_matrix.py"
    params:
          mut_bias=lambda w: "--lambda {0}".format(w.mut_bias)
    shell: 'python3 {input.exec} {params.mut_bias} --output {output}'


rule run_simulation:
    output: touch(EXPERIMENT + '/{alpha}/{mut_bias}_exp')
    input:
         exec=rules.cp_simuevol.output,
         prefs=rules.generate_profile.output,
         matrix=rules.generate_matrix.output
    benchmark: EXPERIMENT + "/benchmarks/exp_{alpha}_{mut_bias}.tsv"
    log:
        out=EXPERIMENT + '/std/exp_{alpha}_{mut_bias}.stdout',
        err=EXPERIMENT + '/std/exp_{alpha}_{mut_bias}.stderr'
    shell: '{input.exec} {SIMULATION_PARAMS}  --nuc_matrix {input.matrix} --preferences {input.prefs} --output {output} 2> {log.err} 1> {log.out}'

rule plot_simulations:
    output: directory(EXPERIMENT + '/plot_simulation')
    input:
         src=ROOT + "/scripts/stat_simulated.py",
         exp=expand(rules.run_simulation.output, alpha=alpha_array, mut_bias=mut_bias_array)
    shell: 'mkdir -p {output} && python3 {input.src} --input {input.exp} --output {output}'

rule run_inference:
    output: EXPERIMENT + '/{alpha}/{mut_bias}_{model}_run.bf'
    input:
         exec=ROOT + "/scripts/hyphy_run.py",
         exp=rules.run_simulation.output
    params:
          model=lambda w: "--model {0}".format(w.model)
    benchmark: EXPERIMENT + "/benchmarks/inference.{alpha}_{mut_bias}_{model}_run.tsv"
    log:
         out=EXPERIMENT + '/std/hyphy_{alpha}_{mut_bias}_{model}.stdout',
         err=EXPERIMENT + '/std/hyphy_{alpha}_{mut_bias}_{model}.stderr'
    shell: 'python3 {input.exec} --input {BATCH_PATH} --fasta {input.exp}.ali {params.model} --tree {NEWICK_PATH} --output {output} 2> {log.err} 1> {log.out}'

rule merge_inference:
    output: touch(EXPERIMENT + '/{model}_plot')
    input:
         src=ROOT + "/scripts/hyphy_simulated.py",
         infer=expand(EXPERIMENT + '/{alpha}/{mut_bias}_{{model}}_run.bf', alpha=[alpha_array[0]], mut_bias=mut_bias_array)
    params:
         model=lambda w: "--model {0}".format(w.model)
    shell:
         'python3 {input.src} {params.model} --trace {input.infer} --output {output}'


rule hyphy_simulated:
    output: plot=touch(EXPERIMENT + '/plot_hyphy')
    input: expand(EXPERIMENT + '/{model}_plot', model=models)


